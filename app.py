# ======== Parte 1: Ajustes no Backend/Conex√£o =================

# =================================================================
# CONFIGURA√á√ïES (J√Å AJUSTADO PARA SEU NOME DA PLANILHA)
# =================================================================
PLANILHA_NOME = "Sistema de vendas"
ABA_VENDAS = "Vendas"                             
ABA_CLIENTES = "Clientes"                         
ABA_PRODUTOS = "Produtos" 
# ... (restante dos imports e configs) ...

# ================== Conex√£o Google Sheets & Sincroniza√ß√£o ==================
GSHEETS_CONECTADO = False
gc = None

# FUN√á√ÉO 1: SINCRONIZA√á√ÉO DE DADOS PARA O SHEETS (GRAVA√á√ÉO)
def sync_to_gsheet(aba_nome: str, data: list):
    """Grava uma lista de dados no Sheets."""
    if not GSHEETS_CONECTADO:
        st.warning(f"N√£o conectado ao Google Sheets. Dados de {aba_nome} salvos apenas localmente.")
        return
    try:
        sh = gc.open(PLANILHA_NOME)
        aba = sh.worksheet(aba_nome)
        
        # L√≥gica de grava√ß√£o:
        if aba_nome == ABA_VENDAS:
            # Vendas: Adiciona uma nova linha
            aba.append_row(data, value_input_option='USER_ENTERED')
        elif aba_nome == ABA_PRODUTOS:
            # Produtos: Limpa a aba e reescreve todos (mais simples para este modelo)
            aba.clear()
            # Define o cabe√ßalho
            aba.append_row(["C√≥digo", "Nome", "Pre√ßo", "Estoque"])
            # Formata os dados para escrita
            produtos_list = [[cod, p['nome'], p['preco'], p['quantidade']] 
                             for cod, p in st.session_state["produtos"].items()]
            aba.append_rows(produtos_list, value_input_option='USER_ENTERED')
        
    except SpreadsheetNotFound:
        st.error(f"‚ùå Planilha '{PLANILHA_NOME}' n√£o encontrada no seu Drive.")
    except WorksheetNotFound:
        st.error(f"‚ùå Aba '{aba_nome}' n√£o encontrada na planilha.")
    except Exception as e:
        st.error(f"‚ùå ERRO ao salvar no Sheets ({aba_nome}): {e}")

# FUN√á√ÉO 2: SINCRONIZA√á√ÉO DE DADOS DO SHEETS (LEITURA)
def sync_from_gsheet():
    """Carrega dados iniciais do Sheets para o session_state."""
    if not GSHEETS_CONECTADO:
        return
    try:
        sh = gc.open(PLANILHA_NOME)
        
        # Carregar Produtos
        aba_produtos = sh.worksheet(ABA_PRODUTOS)
        dados_produtos = aba_produtos.get_all_records()
        produtos = {}
        for row in dados_produtos:
            # Assume que as colunas s√£o "C√≥digo", "Nome", "Pre√ßo", "Estoque"
            try:
                cod = int(row.get("C√≥digo"))
                produtos[cod] = {
                    "nome": str(row.get("Nome")).strip().title(),
                    "preco": float(row.get("Pre√ßo", 0.0)),
                    "quantidade": int(row.get("Estoque", 0))
                }
            except Exception:
                continue # Pula linhas inv√°lidas ou cabe√ßalho
        
        if produtos:
             st.session_state["produtos"] = produtos
             st.success("‚úÖ Produtos carregados do Google Sheets!")
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Falha ao carregar dados do Sheets: {e}")

def connect_gsheet():
    global gc, GSHEETS_CONECTADO
    try:
        creds_dict = st.secrets["gcp_service_account"]
        scopes = ["https://www.googleapis.com/auth/spreadsheets"]
        credentials = Credentials.from_service_account_info(dict(creds_dict), scopes=scopes)
        gc = gspread.authorize(credentials)
        GSHEETS_CONECTADO = True
        
        # CHAMA A SINCRONIZA√á√ÉO AP√ìS A CONEX√ÉO
        sync_from_gsheet() 
        
    except KeyError:
        st.error("‚ùå Chave 'gcp_service_account' n√£o encontrada nos Secrets")
        st.info("Rodando apenas localmente.")
    except Exception as e:
        st.error(f"‚ùå ERRO FATAL AO CONECTAR: {type(e).__name__} - {e}")
        st.info("Verifique o JSON e permiss√µes da Conta de Servi√ßo.")

connect_gsheet() # Chama a conex√£o e a sincroniza√ß√£o inicial
# ... (restante do c√≥digo at√© o in√≠cio da Parte 2) ...

# ... (Fun√ß√µes anteriores) ...

def adicionar_produto_manual(cod, nome, preco, qtd=10):
    cod = int(cod)
    produto_data = {
        "nome": nome.strip(),
        "preco": float(preco),
        "quantidade": qtd
    }
    st.session_state["produtos"][cod] = produto_data
    save_db() # Salva localmente
    
    # üåü CORRE√á√ÉO 1: Salvar Produtos no Sheets
    sync_to_gsheet(ABA_PRODUTOS, []) # Usa a fun√ß√£o que reescreve todos
    
    st.success(f"Produto {nome} adicionado/atualizado!")

# ... (Fun√ß√£o tela_produtos - sem altera√ß√£o significativa) ...

# ... (Fun√ß√µes de Clientes) ...

def registrar_venda(cliente, codigo, quantidade):
    produtos = st.session_state["produtos"]
    if codigo not in produtos:
        st.error("Produto n√£o encontrado.")
        return
    # ... (verifica√ß√£o de estoque e outras l√≥gicas) ...
    
    venda_data = {
        "codigo": codigo,
        "nome": produtos[codigo]["nome"],
        "preco": produtos[codigo]["preco"],
        "quantidade": quantidade,
        "data": datetime.now().strftime("%d/%m/%Y %H:%M")
    }
    
    produtos[codigo]["quantidade"] -= quantidade
    st.session_state["clientes"][cliente].append(venda_data)
    save_db() # Salva localmente
    
    # üåü CORRE√á√ÉO 1: Salvar Vendas no Sheets
    # Formato da linha para o Sheets: [Cliente, C√≥digo, Nome, Pre√ßo, Quantidade, Data]
    linha_venda = [cliente, codigo, venda_data["nome"], venda_data["preco"], 
                   venda_data["quantidade"], venda_data["data"]]
    sync_to_gsheet(ABA_VENDAS, linha_venda) 
    
    # üåü Sincroniza a atualiza√ß√£o de estoque (Produto)
    sync_to_gsheet(ABA_PRODUTOS, [])
    
    st.success("Venda registrada!")

# Fun√ß√£o para filtrar produtos (CORRE√á√ÉO 3)
def autocomplete_vendas(input_cod):
    """Filtra a lista de produtos com base no c√≥digo digitado."""
    input_cod = str(input_cod).strip()
    if len(input_cod) < 2: # üåü CORRE√á√ÉO 3: Inicia a busca ap√≥s 2 d√≠gitos
        return []

    opcoes_encontradas = []
    for cod, dados in st.session_state["produtos"].items():
        cod_str = str(cod)
        # Filtra se o c√≥digo digitado for o in√≠cio do c√≥digo do produto
        if cod_str.startswith(input_cod):
            # Formata a string de exibi√ß√£o: "C√ìDIGO - NOME (R$ PRE√áO)"
            opcoes_encontradas.append(f"{cod} - {dados['nome']} (R$ {dados['preco']:.2f})")
    return opcoes_encontradas


def tela_vendas():
    st.header("üõí Vendas")
    if not st.session_state["clientes"]:
        st.warning("Cadastre um cliente primeiro.")
        return
    if not st.session_state["produtos"]:
        st.warning("Cadastre produtos primeiro.")
        return

    # üåü CORRE√á√ÉO 3: Altera√ß√£o para autocompletar din√¢mico (Input + Select)
    cliente = st.selectbox("Selecione o cliente", list(st.session_state["clientes"].keys()))
    
    col1, col2 = st.columns([3, 1])
    
    # Entrada de texto para buscar o c√≥digo
    codigo_input = col1.text_input("Digite o C√≥digo do produto (m√≠n. 2 d√≠gitos)", key="venda_cod_input")

    # Obt√©m as op√ß√µes filtradas
    opcoes = autocomplete_vendas(codigo_input)
    
    # Se encontrou op√ß√µes, mostra o SelectBox (o usu√°rio deve selecionar)
    if opcoes:
        produto_selecionado_str = col1.selectbox("Selecione o produto", opcoes, key="venda_produto_select")
        # Extrai o c√≥digo (o primeiro n√∫mero da string)
        try:
            codigo = int(produto_selecionado_str.split(' - ')[0])
        except:
            codigo = None # Caso a string n√£o esteja formatada
    else:
        produto_selecionado_str = None
        codigo = None # Nenhum c√≥digo v√°lido selecionado ou encontrado

    # Quantidade na coluna 2
    quantidade = col2.number_input("Quantidade", min_value=1, step=1)
    
    # ----------------------------------------------------------------------

    if st.button("Registrar venda"):
        if codigo is None:
            st.error("Por favor, digite um c√≥digo v√°lido e selecione o produto na lista.")
        else:
            registrar_venda(cliente, codigo, quantidade)

    # ... (Hist√≥rico de vendas) ...

# ... (Relat√≥rios) ...

# üåü CORRE√á√ÉO 2: Altera√ß√£o do Menu (Lateral para Superior)
def menu():
    # üåü Substitui st.sidebar.radio por st.tabs() para menu superior
    opcoes = ["Resumo üìä", "Produtos üì¶", "Clientes üë•", "Vendas üõí", "Relat√≥rios üìë", "Sair üö™"]
    
    # Cria o menu superior como abas
    aba_resumo, aba_produtos, aba_clientes, aba_vendas, aba_relatorios, aba_sair = st.tabs(opcoes)

    with aba_resumo:
        tela_resumo()
    with aba_produtos:
        tela_produtos()
    with aba_clientes:
        tela_clientes()
    with aba_vendas:
        tela_vendas()
    with aba_relatorios:
        tela_relatorios()
    with aba_sair:
        st.header("Sair do Sistema")
        if st.button("Confirmar sa√≠da"):
            st.session_state.clear()
            st.rerun()

# ================== Main ==================
def main():
    init_db()
    
    # Move a exibi√ß√£o do usu√°rio para o topo, antes do menu
    if st.session_state.get("usuario"):
        st.sidebar.title("üìå Sistema de Vendas")
        st.sidebar.write(f"üë§ **Logado:** {st.session_state['usuario']}")
        
    if not st.session_state.get("usuario"):
        login()
    else:
        # üåü O menu agora √© superior
        menu()

if __name__ == "__main__":
    main()
